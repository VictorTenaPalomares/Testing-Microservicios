package org.aguzman.appmockito.ejemplos.services;

import java.util.Optional;

import org.aguzman.appmockito.ejemplos.models.Examen;
import org.aguzman.appmockito.ejemplos.repositories.ExamenRepository;

public class ExamenServiceImpl implements ExamenService {

	// Interactuamos con el repositorio
	private ExamenRepository examenRepository;
	
	
	// Constructor para asignar la dependencia
	public ExamenServiceImpl(ExamenRepository examenRepository) {
		this.examenRepository = examenRepository;}

	@Override
	public Examen findExamenPorNombre(String nombre) {
		
		//1.Usamos el repositorio que es una lista y la recorremos con la API stream
		//2. aplicamos filter devuelve un predicate y aplicamos lambda
		//3. emitimos un parámetro(e) que representará un examen
		//4. a partir de la lambda hacemos algo con él, en este caso filtrar por nombre
		//5. obtenemos el nombre buscado en un stream y lo pasamos a uno solo 
		// con findFirst que devuelve un optional por lo tanto en este punto
		// agregamos Optional al prncipio y lo igualamos a examenRepository
		// En resumen tendremos una representación en Optional del objeto
		// buscado que además nos evitará un posible null pointer.
		// Acto seguido del findfirst,
		
		Optional<Examen>examenOptional= examenRepository.findAll().stream().filter(e->e.getNombre()
				.contains(nombre))
				.findFirst();
		
		//Vale, en este momento el examen que queremos devolver es null
		Examen examen=null;
		
		// Pero como arriba lo hemos encontrado como optional...
		if(examenOptional.isPresent()) {
			//Si presente asignamos o lanzamos excepción
			examen=examenOptional.orElseThrow();
		}
		
		
		return examen;
	}

}
