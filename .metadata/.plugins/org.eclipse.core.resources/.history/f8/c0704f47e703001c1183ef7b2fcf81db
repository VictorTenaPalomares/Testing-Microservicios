package org.victorttt.junit_app.ejemplo.models;

import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;

import org.junit.jupiter.api.Test;

class CuentaTest {

	// 1. Crear clase y escribir método de prueba con anotacion @Test
	@Test
	void testNombreCuenta() {

		// 2. Instanciar la clase que queremos probar
		Cuenta cuenta = new Cuenta("Víctor", new BigDecimal("1000.1234565"));

		// 3. Pasamos datos para probar (input), en este caso el seter este
		// cuenta.setPersona("Víctor");

		// 4. Definimos la espectativa
		String esperado = "Víctor";

		// 5. Reflejamos la realidad
		String real = cuenta.getPersona();

		// 6. Para comprobar algo usamos la clase Assertions y alguno de sus métodos
		assertEquals(esperado, real);
		assertTrue(real.equals("Víctor"));
		// Con que falle solamente 1 método los tests no pasan
	}

	@Test
	void testSaldoCuenta() {
		Cuenta cuenta = new Cuenta("Víctor", new BigDecimal("1000.1234565"));
		assertEquals(1000.1234565, cuenta.getSaldo().doubleValue());
		// Para comprobar que el saldo es positivo
		assertFalse(cuenta.getSaldo().compareTo(BigDecimal.ZERO) < 0);
		// Validamos lo mismo con la lógica inversa
		assertTrue(cuenta.getSaldo().compareTo(BigDecimal.ZERO) > 0);
	}

	// Desarrollando mediante patrón TDD
	@Test
	void testReferenciaCuenta() {
		Cuenta cuenta = new Cuenta("Jhon Doe", new BigDecimal("8900.9997"));
		Cuenta cuenta2 = new Cuenta("Jhon Roe", new BigDecimal("8900.9997"));

		// Si no son iguales que pase la prueba
		// aquí aunque los objetos tienen el mismo contenido, al ser objetos se
		// comprueban por referencia
		// apuntan a direcciones de memoria distintas, por lo tanto son diferentes
		// assertNotEquals(cuenta2, cuenta);// Afirma que no son iguales

		// Ahora quitamos el not y el test falla, por lo tanto tenmemos que
		// arrglarlo, nos hemos dado cuenta antes de que se escriba el codigo en la
		// clase cuenta
		// y esta es la eseencia TDD, es decir, escribir las pruebas para que
		// fallen y a cntinuación escribir el código para que las pasen,
		// por último refactorizar para optimizar / limpiar nuestro código
		assertEquals(cuenta2, cuenta);// Afirma que no son iguales
		
		/*Después de sobrrescribir en la clase cuenta el método equals
		 * hemos cambiado la forma en la que se comprueba la igualdad entre objetos
		 * y la prueba la pasa. Por lo tanto, hemos desarrolladaprimero con la prueba
		 *  y despues de que falle lo arreglamos y así se queda*/

	}

}
